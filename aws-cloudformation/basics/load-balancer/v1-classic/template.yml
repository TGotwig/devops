AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.nano
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  Region2ELBAccountId:
    us-east-1:
      AccountId: "127311923021"
    us-west-1:
      AccountId: 027434742980
    us-west-2:
      AccountId: "797873946194"
    eu-west-1:
      AccountId: "156460612806"
    ap-northeast-1:
      AccountId: "582318560864"
    ap-northeast-2:
      AccountId: "600734575887"
    ap-southeast-1:
      AccountId: "114774131450"
    ap-southeast-2:
      AccountId: "783225319266"
    ap-south-1:
      AccountId: "718504428378"
    us-east-2:
      AccountId: 033677994240
    sa-east-1:
      AccountId: "507241528517"
    cn-north-1:
      AccountId: "638102146993"
    eu-central-1:
      AccountId: 054676820928
  Region2ARNPrefix:
    us-east-1:
      ARNPrefix: "arn:aws:"
    us-west-1:
      ARNPrefix: "arn:aws:"
    us-west-2:
      ARNPrefix: "arn:aws:"
    eu-west-1:
      ARNPrefix: "arn:aws:"
    ap-northeast-1:
      ARNPrefix: "arn:aws:"
    ap-northeast-2:
      ARNPrefix: "arn:aws:"
    ap-southeast-1:
      ARNPrefix: "arn:aws:"
    ap-southeast-2:
      ARNPrefix: "arn:aws:"
    ap-south-1:
      ARNPrefix: "arn:aws:"
    us-east-2:
      ARNPrefix: "arn:aws:"
    sa-east-1:
      ARNPrefix: "arn:aws:"
    cn-north-1:
      ARNPrefix: "arn:aws-cn:"
    eu-central-1:
      ARNPrefix: "arn:aws:"
Resources:
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones: !GetAZs ""
      CrossZone: "true"
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "80"
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: "3"
        UnhealthyThreshold: "5"
        Interval: "30"
        Timeout: "5"
      ConnectionDrainingPolicy:
        Enabled: "true"
        Timeout: "300"
      AccessLoggingPolicy:
        S3BucketName: !Ref "LogsBucket"
        S3BucketPrefix: Logs
        Enabled: "true"
        EmitInterval: "60"
    DependsOn: LogsBucketPolicy
  LogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref "LogsBucket"
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Sid: ELBAccessLogs20130930
            Effect: Allow
            Resource:
              !Join [
                "",
                [
                  !FindInMap [Region2ARNPrefix, !Ref "AWS::Region", ARNPrefix],
                  "s3:::",
                  !Ref "LogsBucket",
                  /,
                  Logs,
                  /AWSLogs/,
                  !Ref "AWS::AccountId",
                  /*,
                ],
              ]
            Principal:
              AWS:
                !FindInMap [Region2ELBAccountId, !Ref "AWS::Region", AccountId]
            Action: ["s3:PutObject"]
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref "LaunchConfig"
      MinSize: "2"
      MaxSize: "2"
      LoadBalancerNames: [!Ref "ElasticLoadBalancer"]
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: "1"
        MaxBatchSize: "1"
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref "KeyName"
      ImageId: "ami-0b898040803850657"
      SecurityGroups: [!Ref "InstanceSecurityGroup"]
      InstanceType: !Ref "InstanceType"
      UserData: !Base64 |
        #!/bin/bash -xe
        sudo yum install -y gcc-c++ make
        curl -sL https://rpm.nodesource.com/setup_12.x | sudo -E bash -

        sudo yum update -y && sudo yum install -y git nodejs

        git clone https://github.com/TGotwig/devops-templates
        sudo chmod -R 777 /devops-templates
        cd /devops-templates/utils/http-base && npm install && nohup npm start &
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the configured port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: !Ref "SSHLocation"
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
Outputs:
  URL:
    Description: URL of the website
    Value: !Join ["", ["http://", !GetAtt [ElasticLoadBalancer, DNSName]]]
  ELBAccessLogsBucket:
    Description: DNS name of the S3 bucket storing ELB Access Logs
    Value: !GetAtt [LogsBucket, DomainName]
